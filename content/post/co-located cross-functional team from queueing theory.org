#+DRAFT: t
* Ideal state
A team that repeatably delivers a consistent amount of value.
* Basic needs
- many skills
- communication

We need many skills because we are building something complex and multi-faceted.
We need communication so that we are able to act as a cohesive unit.

* Purposes that we need to establish
From first principles, we should identify / define the sets of skills that make sense, but it's a waste of time when we have good templates such as "product management" that we can re-use.
We can make a list of the various communication touchpoints required between these skillsets. This is also mostly done for us through all the work done even in something as simple as Scrum.

* Queueing theory
We can make a list of the sets of skills required to get anything done, e.g. devops, aws, Ruby, Javascript, copy, compliance, product management. This can't be done for us because it depends on what we're doing.

Now we decide on trade-offs. /Ideally/ we can put all the skills in the same team, because that means all work that has to be done by a single team goes through only one queue: the team's queue. As soon as there is a skill that does not exist in the team, then all work in the team which requires that skill will need to go through a separate queue (the queue that can do that work).

As soon as work goes through a separate queue, you also lose control of your actual ability to deliver, which means you can no longer establish a velocity with full clarity.

In a common case here, you have a team where only one person owns a skill, and that means all work gets funneled into person-sized queues, and that means velocity is just impossible to establish.

** Cross-functional team
In other words, it's very important for people in a team to be cross-functional: they need to be able to do some work from a few skills. In the ideal state, everyone can do some of everything, though they will likely be an expert in only one or two. And yes, that means everyone should be able to do a little bit of product management, a little bit of design, a little bit of Javascript, etc. Kent Beck discusses this briefly here: https://www.facebook.com/notes/kent-beck/paint-drip-people/1226700000696195/

This allows two things:
1. If someone is out, the work can continue
2. Communication is easier because more skills are shared

** Communication
Same argument here for a co-located team. If the team's not sitting together, then communication becomes another queue that makes the work harder to measure. "Oh, I asked the question on Slack, I'm waiting for an answer."

* Specialized generalists
When people have multiple skills required for the building of the product, the bus factor is reduced, and it's possible to make a list of required skills (e.g. Ruby, Javascript, testing, product management, terraform) and compare that to the skillsets the people on the team currently have. From there, you have a list of strengths and weaknesses on the team, which you can make up for by adding people with the skills, going to training, changing the work so it doesn't require the missing skills, or accepting the team will have a loss of performance and require sending its work to another queue.
