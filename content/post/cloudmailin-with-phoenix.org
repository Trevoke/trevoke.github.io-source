#+DRAFT: t
#+TITLE:       CloudMailIn with Phoenix
#+AUTHOR:      Aldric Giacomoni
#+EMAIL:       trevoke@gmail.com
#+DATE: 2016-04-03T00:00:00-05:00
#+URI:         /blog/%y/%m/%d/cloudmailin-with-phoenix
#+KEYWORDS:    phoenix, elixir, email, cloudmailin
#+TAGS:        cloudmailin, phoenix, elixir
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: What CloudMailIn looks like when the request gets to Phoenix
#+DRAFT: t

Short and sweet, the params when they get to Phoenix look like:

#+BEGIN_SRC elixir
%{"envelope" => %{"from" => "email-sender@anon.com",
    "helo_domain" => "mail-ig0-f180.google.com",
    "recipients" => %{"0" => "anonymized_email@cloudmailin.net"},
    "remote_ip" => "209.85.213.180",
    "spf" => %{"domain" => "gmail.com", "result" => "neutral"},
    "to" => "anonymized_email@cloudmailin.net"},
  "headers" => %{"DKIM-Signature" => "v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113; h=mime-version:references:in-reply-to:from:date:message-id:subject:to; bh=NhQC5Y4GtndvGS3lzmW4g8NmFWYjaV+sLM17QKhijEc=; b=VabUB6nyFC6cwPdLPlGjhhSyr8vPtY8FMbRo3S+vJM6SDV+NuYrH7tJVxPRGMO4GiC poUhLqeTKSNx3mdA8uYCmmFsmS7gzTf/Mm645CyTKXT/utUVW9WhFI+tNMfLRLaN7CNu mrE/nvWQmjvvvx2PhkH72d4InTkO6L5lBSsUNwD22VQ7T1pE7jAuAe0rh1JWQyuNR12W wao4IBwShKG62G7OUO1whk8WqhDqKVOShILV2bIX8/5Wbv6UXpgwGi1FPdwwrECLqHWn xdp+7oPHlqWKcQPvRksoF/P1t7jgTVcdqSwFbh341syiVq6R/GDytZMBT7a6N2EqoHt7 sHpA==",
    "Date" => "Sun, 03 Apr 2016 16:46:29 +0000",
    "From" => "some-sender@where.com",
    "In-Reply-To" => "<id@mail.gmail.com>",
    "Message-ID" => "<msgid@mail.gmail.com>",
    "Mime-Version" => "1.0",
    "Received" => "by mail-ig0-f180.google.com with SMTP id ui10so47872593igc.1 for <anonymized_email@cloudmailin.net>; Sun, 03 Apr 2016 09:46:39 -0700",
    "References" => "<idQ@mail.gmail.com>",
    "Subject" => "Re: TestSatNight",
    "To" => "\"anonymized_email@cloudmailin.net\" <e448577c412a059d1937@cloudmailin.net>",
    "X-Gm-Message-State" => "somethinghere",
    "X-Google-DKIM-Signature" => "v=1; a=rsa-sha256; c=relaxed/relaxed; d=1e100.net; s=20130820; h=x-gm-message-state:mime-version:references:in-reply-to:from:date :message-id:subject:to; bldsadklasjdksasdjklasdjkas",
    "X-Received" => "by 10.50.30.101 with SMTP id r5mr7754024igh.2.1459701998613; Sun, 03 Apr 2016 09:46:38 -0700 (PDT)"},
  "html" => "<div dir=\"ltr\">Okay okay okay foobar<br><br><div class=\"gmail_quote\"><div dir=\"ltr\">On Sat, Apr 2, 2016 at 11:12 PM Someone &lt;<a href=\"me@gmail\">me@gmail.com</a>&gt; wrote:<br></div><blockquote class=\"gmail_quote\" style=\"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex\"><div dir=\"ltr\">BodyTest</div></blockquote></div></div>\n",
  "plain" => "Okay okay okay foobar\n\nOn Sat, Apr 2, 2016 at 11:12 PM Someone <some@one.com> wrote:\n\n> BodyTest\n>\n",
  "reply_plain" => "Okay okay okay foobar"}
#+END_SRC

So if you're in Phoenix, one way you could do a sanity check is like this

You set up a mini-pipeline based on HTML — this is optional — in the router, like so:

Whereas in the router, you'd have this:
#+BEGIN_SRC elixir
# web/router.ex
  pipeline :mail do
    plug :accepts, ["html"]
    plug :fetch_session
    plug :fetch_flash
  end

  scope "/mail", MyApp do
    pipe_through :mail
    post "/", MailController, :create
  end
#+END_SRC

And then you can use a controller like this:
#+BEGIN_SRC elixir
# web/controllers/mail_controller.ex
defmodule MyApp.MailController do
  use MyApp.Web, :controller
  require Logger

  def create(conn, params) do
    foo = params["headers"]["Subject"]
    bar = if(String.length(params["reply_plain"]) == 0) do
      params["plain"]
    else
      params["reply_plain"]
    end
    date = params["headers"]["Date"]

    render conn, :ok
  end
end
#+END_SRC


I don't actually know how to properly log a struct (I'm *that* new to Elixir that I don't know how to pretty-print a struct, I suppose), but you could always use IEx: in the controller, =require IEx= and in the action, =IEx.pry=, then go nuts.
